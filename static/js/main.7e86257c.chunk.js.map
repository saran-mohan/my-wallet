{"version":3,"sources":["components/Wallet/Wallet.js","containers/Wallet/Wallet.js","actions/balance.js","actions/types.js","components/BitcoinBalance/BitcoinBalance.js","containers/BitcoinBalance/BitcoinBalance.js","actions/bitcoin.js","components/App/App.js","serviceWorker.js","reducers/index.js","reducers/balance.js","reducers/bitcoin.js","Root.js","index.js"],"names":["Wallet","props","updateAmount","event","setState","amount","parseInt","target","value","depositAmount","state","withdrawAmount","className","type","placeholder","onChange","this","onClick","Component","mapDispatchToProps","connect","BitcoinBalance","fetchBitcoin","balance","bitcoin","bpi","USD","rate","replace","e","displayBitcoinBalance","payload","axios","get","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","combineReducers","action","data","children","initialState","store","createStore","reducers","applyMiddleware","reduxThunk","reduxPromise","ReactDOM","render","StrictMode","Root","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7e86257c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport class Wallet extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      amount: 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update amount\r\n   */\r\n  updateAmount = (event) => {\r\n    this.setState({\r\n      amount: parseInt(event.target.value, 10),\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Deposit amount\r\n   */\r\n  depositAmount = () => this.props.depositAmount(this.state.amount);\r\n\r\n  /**\r\n   * Withdraw amount\r\n   */\r\n  withdrawAmount = () => this.props.withdrawAmount(this.state.amount);\r\n\r\n  /**\r\n   * Render wallet component\r\n   */\r\n  render() {\r\n    return (\r\n      <div className=\"ui form\">\r\n        <div className=\"inline fields\">\r\n          <div className=\"five wide field\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Amount\"\r\n              className=\"input-wallet\"\r\n              onChange={this.updateAmount}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"five wide field\">\r\n            <button\r\n              className=\"ui primary basic button btn-deposit\"\r\n              onClick={this.depositAmount}\r\n            >\r\n              Deposit\r\n            </button>\r\n            <button\r\n              className=\"ui secondary basic button btn-withdraw\"\r\n              onClick={this.withdrawAmount}\r\n            >\r\n              Withdraw\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { connect } from 'react-redux';\r\n\r\nimport { depositAmount, withdrawAmount } from '../../actions/balance';\r\nimport { Wallet } from '../../components/Wallet/Wallet';\r\n\r\nconst mapDispatchToProps = {\r\n  depositAmount,\r\n  withdrawAmount,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Wallet);\r\n","import { SET_BALANCE, DEPOSIT, WITHDRAW } from './types';\r\n\r\n/**\r\n * Set balace to the wallet\r\n * @param {} balance\r\n */\r\nexport const setBalance = (balance) => {\r\n  return {\r\n    balance,\r\n    type: SET_BALANCE,\r\n  };\r\n};\r\n\r\nexport const depositAmount = (amount) => {\r\n  return {\r\n    amount,\r\n    type: DEPOSIT,\r\n  };\r\n};\r\n\r\nexport const withdrawAmount = (amount) => {\r\n  return {\r\n    amount,\r\n    type: WITHDRAW,\r\n  };\r\n};\r\n","/**\r\n * Action types\r\n */\r\nexport const SET_BALANCE = 'SET_BALANCE';\r\nexport const DEPOSIT = 'DEPOSIT';\r\nexport const WITHDRAW = 'WITHDRAW';\r\nexport const FETCH_BITCOIN = 'FETCH_BITCOIN';\r\n","import React, { Component } from 'react';\r\n\r\nexport class BitcoinBalance extends Component {\r\n  /**\r\n   * Fetch current bpi on component mount\r\n   */\r\n  componentDidMount() {\r\n    this.props.fetchBitcoin();\r\n  }\r\n  /**\r\n   * Compute bitcoin balance\r\n   */\r\n  displayBitcoinBalance() {\r\n    const { balance, bitcoin } = this.props;\r\n    try {\r\n      return balance / parseInt(bitcoin.bpi.USD.rate.replace(',', ''), 10);\r\n    } catch (e) {\r\n      return 0;\r\n    }\r\n  }\r\n  /**\r\n   * Render Bitcoin balance component\r\n   */\r\n  render() {\r\n    return (\r\n      <h3 className=\"balance\">\r\n        Bitcoin Balance:{' '}\r\n        <span className=\"ui small header\">{this.displayBitcoinBalance()}</span>\r\n      </h3>\r\n    );\r\n  }\r\n}\r\n","import { connect } from 'react-redux';\r\nimport { fetchBitcoin } from '../../actions/bitcoin';\r\nimport { BitcoinBalance } from '../../components/BitcoinBalance/BitcoinBalance';\r\n\r\nconst mapDispatchToProps = {\r\n  fetchBitcoin,\r\n};\r\nconst mapStateToProps = ({balance, bitcoin}) => ({balance, bitcoin});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BitcoinBalance);","import { FETCH_BITCOIN } from './types';\r\nimport axios from 'axios';\r\n\r\nexport const fetchBitcoin = () => {\r\n  const response = axios.get('https://api.coindesk.com/v1/bpi/currentprice.json');\r\n  return {\r\n    type: FETCH_BITCOIN,\r\n    payload: response,\r\n  };\r\n};","import React, { Component } from 'react';\r\nimport './App.scss';\r\nimport Wallet from '../../containers/Wallet/Wallet';\r\nimport { connect } from 'react-redux';\r\nimport BitcoinBalance from '../../containers/BitcoinBalance/BitcoinBalance';\r\n\r\nexport class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"app-container\">\r\n        <div className=\"app-wallet\">\r\n          <div className=\"ui card\">\r\n            <div className=\"content\">\r\n              <div className=\"header title\">My Wallet App!</div>\r\n            </div>\r\n            <div className=\"extra content\">\r\n              <h3 className=\"balance\">\r\n                Wallet Balance: <span className=\"ui small header\">{this.props.balance}</span>\r\n              </h3>\r\n            </div>\r\n            <div className=\"content\">\r\n              <Wallet />\r\n            </div>\r\n            <div className=\"extra content\">\r\n              <BitcoinBalance />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ balance }) => ({ balance });\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport balance from './balance';\r\nimport bitcoin from './bitcoin';\r\n\r\nexport default combineReducers({\r\n  balance,\r\n  bitcoin,\r\n});\r\n","import { SET_BALANCE, DEPOSIT, WITHDRAW } from '../actions/types';\r\n\r\nexport default (state = 0, action) => {\r\n  switch (action.type) {\r\n    case SET_BALANCE:\r\n      return action.balance;\r\n    case DEPOSIT:\r\n      return state + action.amount;\r\n    case WITHDRAW:\r\n      return state - action.amount;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { FETCH_BITCOIN } from '../actions/types';\r\n\r\nexport default (state = {}, action) => {\r\n  if (FETCH_BITCOIN === action.type) {\r\n    return action.payload.data;\r\n  }\r\n\r\n  return state;\r\n};\r\n","import React from 'react';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport reduxThunk from 'redux-thunk';\r\nimport reduxPromise from 'redux-promise';\r\nimport reducers from './reducers';\r\nimport { Provider } from 'react-redux';\r\n\r\nexport default ({ children, initialState = {} }) => {\r\n  const store = createStore(\r\n    reducers,\r\n    initialState,\r\n    applyMiddleware(reduxThunk, reduxPromise),\r\n  );\r\n  return <Provider store={store}>{children}</Provider>;\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Root from './Root';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Root>\r\n      <App />\r\n    </Root>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}